#include <iostream>
#include <math.h>
#include <GL/glut.h>
#define GL_PI 3.14f
bool bCull = true;
GLfloat xTran = 0.0f;
GLfloat yTran = 0.0f;
GLfloat xRot = 0.0f;
GLfloat yRot = 0.0f;


void SpecialKeys(int key, int x, int y) {
    if(key == GLUT_KEY_UP)
        xRot -= 2.0f;
    else if(key == GLUT_KEY_DOWN)
        xRot += 2.0f;
    else if(key == GLUT_KEY_LEFT)
        yRot += 2.0f;
    else if(key == GLUT_KEY_RIGHT)
        yRot -= 2.0f;

    if(xRot > 360.0f)
        xRot -= 360.0f;
    if(xRot < 0.0f)
        xRot += 360.0f;
    if(yRot > 360.0f)
        yRot -= 360.0f;
    if(yRot < 0.0f)
        yRot += 360.0f;

    glutPostRedisplay();
}
void keyboard(unsigned char key, int x, int y) {
    if(key == 'a')
        xTran -= 2.0f;
    else if(key == 'd')
        xTran += 2.0f;
    else if(key == 'w')
        yTran += 2.0f;
    else if(key == 'x')
        yTran -= 2.0f;
    
    glutPostRedisplay();
}
void RenderScene(void) {
    std::cout << "RenderScene" << std::endl;

    if(bCull)
        glEnable(GL_CULL_FACE);
    else
        glDisable(GL_CULL_FACE);

    glPushMatrix();
    glRotatef(xRot, 1.0f, 0.0f, 0.0f);
    glRotatef(yRot, 0.0f, 1.0f, 0.0f);

    glTranslatef(xTran, yTran, 0.0f);

    GLfloat x, y, angle;
    glClear(GL_COLOR_BUFFER_BIT);
    int iPivot = 1;
    glBegin(GL_TRIANGLE_FAN);
    glVertex3f(0.0f, 0.0f, 75.0f);
    for(angle = 0.0f; angle < (2.0f * GL_PI); angle += (GL_PI / 8.0f)) {
        x = 50.0f * cos(angle);
        y = 50.0f * sin(angle);
        if((iPivot%2) == 0) {
            glColor3f(0.0f, 1.0f, 0.0f);
        }
        else {
            glColor3f(1.0f, 0.0f, 0.0f);
        }
        iPivot++;
        glVertex2f(x, y);
    }
    glEnd();

    glBegin(GL_TRIANGLE_FAN);
    glVertex3f(0.0f, 0.0f, 0.0f);
    for(angle = 0.0f; angle < (2.0f * GL_PI); angle += (GL_PI / 8.0f)) {
        x = 50.0f * sin(angle);
        y = 50.0f * cos(angle);
        if((iPivot%2) == 0) {
            glColor3f(1.0f, 0.0f, 0.0f);
        }
        else {
            glColor3f(0.0f, 1.0f, 0.0f);
        }
        iPivot++;
        glVertex2f(x, y);
    }
    glEnd();


    glPopMatrix();
    glutSwapBuffers(); // double buffering이 아닌 단일 버퍼이므로 flush로 출력
}

void SetupRC(void) {
    std::cout << "SetupRC" << std::endl;
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glShadeModel(GL_FLAT);
}

void ChangeSize(GLsizei w, GLsizei h) {
    std::cout << "ChangeSize" << std::endl;

    GLdouble nRange = 100.0f;
    GLdouble aspectRatio;

    if(h == 0)
        h = 1;
    glViewport(0, 0, w, h);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    aspectRatio = (GLfloat)w / (GLfloat)h;
    if(w <= h)
        glOrtho(-nRange, nRange, -nRange / aspectRatio, nRange / aspectRatio, nRange, -nRange);
    else
        glOrtho(-nRange * aspectRatio, nRange * aspectRatio, -nRange, -nRange, nRange, -nRange);
    
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

}

int main(int argc, char** argv) {
    glutInit(&argc, argv);                                   // GLUT 초기화
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);             // 단일 버퍼 + RGB 모드
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(200, 100);
    glutCreateWindow("simple");                              // 윈도우 생성

    glutDisplayFunc(RenderScene);                            // 그리기 콜백 등록
    glutReshapeFunc(ChangeSize);                             // 창 크기 변경 시 콜백 등록
    glutKeyboardFunc(keyboard);
    glutSpecialFunc(SpecialKeys);
    SetupRC();                                               // 초기 설정 호출
    glutMainLoop();                                          // 메인 루프 진입 (종료되지 않음)
}
