#include <GL/glut.h>
#include <stdio.h>
#include <iostream>
#include <cmath>;
#define GL_PI 3.1415f
// 시점 로테이트 + 시작점 색깔 변경
void RenderScene(void) 
{
    std::cout << "Render Scene" << std::endl;

    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0f, 0.0f, 0.0f);

    
    glPushMatrix();
    glRotatef(45, 1.0f, 0.0f, 0.0f);
    glRotatef(45, 0.0f, 1.0f, 0.0f);

    /* // 수업 코드
    float z= -50.0f;
    for(float angle =0.0f; angle <= angle (2.0*GL_PI)*3.0f; angle += 1.0f)
    {
        float x = 50.0f * cos(angle);
        float y = 50.0f * sin(angle);
        glVertex3f(x, y, z);
        z += 0.5f;
    }

    */

    glPointSize(2.0);
    glBegin(GL_POINTS);
    /*
    float z = 0.0f;
    for (float i = 0.0f; i <= 6.0f * (GL_PI); i += 0.1f) 
    {
        if (z == 0.0f)
        { 
            glColor3f(0.0f, 0.0f, 1.0f);
        }
        float x = cos(i) * 50;
        float y = sin(i) * 50;
        
        glVertex3f(x, y, z);
        glColor3f(1.0f, 0.0f, 0.0f);
        
        
        z += 0.2f;
    }
    */
    
    glPointSize(1.0);
    glDisable(GL_POINT_SMOOTH);

    glBegin(GL_POINTS);
    float z = 0.0f;
    for (float i = 0.0f; i <= 6.0f * (GL_PI); i += 0.1f)
    {
        float x = cos(i) * 50;
        float y = sin(i) * 50;

        // 점 묶음을 정사각형처럼 찍기 위한 코드
        float size = 3.0f;  // 정사각형 한 변 길이
        float step = 0.5f;  // 점 간 간격

        for (float dx = -size / 2; dx <= size / 2; dx += step) {
            for (float dy = -size / 2; dy <= size / 2; dy += step) {
                for (float dz = -size / 2; dz <= size / 2; dz += step) {
                    if (z == 0.0f)
                        glColor3f(0.0f, 0.0f, 1.0f); // 첫 점은 파란색
                    else
                        glColor3f(1.0f, 0.0f, 0.0f); // 나머진 빨간색

                    glVertex3f(x + dx, y + dy, z + dz);
                }
            }
        }

        z += 0.2f;
    }
    glEnd();

    glPopMatrix();

    glutSwapBuffers();
}

void SetupRC(void) 
{
    std::cout << "SetupRC" << std::endl;
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
}

void ChangeSize(GLsizei w, GLsizei h) 
{
    std::cout << "w = " << w << " " << " h = " << h << std::endl;
    std::cout << "ChangeSize" << std::endl;

    GLint wSize = 100;
    GLfloat aspectRatio;

    if (h == 0) 
    {
        h = 1;
    }
    glViewport(0, 0, w, h);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    // 여기에 작성
    aspectRatio = (GLfloat)w / (GLfloat)h;
    if (w <= h)
        glOrtho(-100, 100, -100 / aspectRatio, 100 / aspectRatio, -500, 500); // 세로가 더 기니까 세로를 늘려서 사각형의 비율을 유지
    else
        glOrtho(-100 * aspectRatio, 100 * aspectRatio, -100, 100, -500, 500); // 가로가 더 기니까 가로 보는 시야를 늘려서? 사각형의 비율을 유지
    // 여기에 작성
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}
/*
   if (w <= h)
        glOrtho(-wSize, wSize, -wSize / aspectRatio, wSize / aspectRatio, -1, 1); 
   else
        glOrtho(-100 * aspectRatio, 100 * aspectRatio, -100, 100, -500, 500);
*/


int main(int argc, char** argv) 
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("simple");

    SetupRC();
    glutDisplayFunc(RenderScene);
    glutReshapeFunc(ChangeSize);
    glutMainLoop();
}
